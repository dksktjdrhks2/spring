
DB(DataBase)
 - 다량의 데이터를 저장하고 관리하는 용도로 만들어진 저장소...
 - DB2, Oracle , MySQL , MS-SQL Server , Maria DB.......... 

 - SQL(Structured Query Language)
  - 구조화된 질의어
  - 구조화된 언어..
   - 규칙 또는 일정한 틀안의 패턴만 파악하면 쉽게 사용할수 있다...
  - DBMS마다 차이는 있어도 전체적인 큰틀은 똑같다....SQL표준...

  - SQL문 종류
   - DML - 데이터 베이스에서 데이터를 조작할때 사용하는 SQL
   - DDL - 데이터 베이스를 조작하는데 사용하는 SQL문
   - DCL - 데이터베이스를 컨트롤 하는데 사용하는  SQL문

======================================================================================

관리자 계정 접속
 - conn/as sysdba
 - 18c - /as sysdba

접속 계정 확인
 - show user

계정접속
 - conn 아이디/비밀번호

  - conn system/oracle

HTTPPort번호 확인
 - select dbms_xdb.gethttpport() from dual;

HTTPPort번호 변경
 - exec dbms_xdb.sethttpport(포트번호);
	exec dbms_xdb.sethttpport(9090);

DDL
C - create
R - select
U - alter
D - Drop


계정 생성
 - create user 아이디 identified by 비밀번호;
  - create user c##jsp identified by jsp;
  - ID : c##jsp  password : jsp


  - 18에서는 사용자 계정을 만들때 c##을 적고 그 뒤에 아이디를 만들어야 한다....

  
권한 설정
 - grant 권한1,권한2,권한3....... to 아이디;

  - connect - 연결권한
  - resource - 자원접근 권한
  - dba - 관리자권한....

  - grant connect,resurce to c##jsp;


계정 비밀번호 수정
 - alter user 아이디 identified by 바꿀비밀번호;
  - alter user c##jsp identified by oracle;


계정 삭제
 - drop user 아이디;
  - drop user c##jsp;

 - 데이터가 있는 계정 삭제시...
  - drop user 아이디 cascade;

--------------------------------------------------------------------------------------

테이블
 - 데이터를 저장하기위한 틀...
 - 일반적인 표를 생각하면 된다...
 - 분류 - 테이블 내에서 속성 또는 컬럼,필드라고 부른다...
 - 데이터 - 한줄을 하나의 데이터로 보고 레코드라고 부른다...

--------------------------------------------------------------------------------------

자료형
 - 숫자 - number , number(p) , number(p,s)
  - NUMBER(P,S)	
	P, S로 표현 숫자 데이터 타입 p: 1 ~ 38, s: -84 ~ 127 
	p(precision): 유효자리수, s(scale): 소수점 유효자리
 - 문자(문자 , 문자열)
  - char(정수값) - 고정
  - varchar2(정수값) - 가변
  - 영어(1byte) , 한글(3byte)
 - 날짜 - date
  - yy/mm/dd hh:mm:ss 기본형태....

--------------------------------------------------------------------------------------

DDL

테이블 생성
 - create table 테이블명(필드명 필드타입 제약조건,필드명 필드타입 제약조건,필드명 필드타입 제약조건.....);

create table sample(
num number,
name varchar2(10),
reg date
);

계정 내에 있는 테이블 확인
 - select * from tab;

테이블 상세 확인
 - desc 테이블명;


테이블 복사
 - create table 테이블명 as select * from 복사할테이블명;
  create table sample1 as select * from sample;


테이블 수정
  - 필드 추가
	 alter table 테이블명 add(필드명 필드타입,필드명 필드타입...);
  - 필드 수정
	 alter table 테이블명 modify(필드명 필드타입,필드명 필드타입...);
  - 필드 삭제
	 alter table 테이블명 drop(필드명,필드명....);

테이블 삭제
 - drop table 테이블명;

 - 완전 삭제..
  - drop table 테이블명 purge;

-----------------------------------------------------------------------------
DML
C - insert
R - select
U - update
d - delete

데이터(레코드) 추가
 - insert into 테이블명(필드1,필드2,필드3....) values(데이터1,데이터2,데이터3....);

  - DB에서는 문자형 데이터를 사용할때는 ''안에 적어야 한다....
  - 18c에서는 테이블의 insert가 되지 않기 때문에 권한 설정을 따로 해주어야 한다.
    alter user 사용자이름 default tablespace users quota unlimited on users;

    alter user c##jsp default tablespace users quota unlimited on users;

  	insert into sample(num,name,reg) values(1,'김민준',to_date('2019-11-14'));
	insert into sample values(2,'다현','1998-05-28');
	insert into sample(reg,num) values(sysdate,3);

-------------------------------------------------------------------------------------------------------

트랜젝션 - 작업관리

commit; - 작업 저장...

rollback; - 작업 되돌리기..

-------------------------------------------------------------------------------------------------------

DDL
시퀀스
 - 어떤 중복되지 않는 번호를 붙일때 사용되는 객체...


-------------------------------------------------------------------------------------------------------

테이블 검색
 - select * from 테이블명;

시퀀스 생성
 - create sequence 시퀀스명 옵션1 옵션2 옵션3.....;

 - create sequence test_seq;


 - 옵션
	start with 값 - 시작값
	minvalue 최소값
	maxvalue 최대값
	increment by 값 - 변화값
	cycle / nocycle
	cache 정수/ nocache
	order / noorder

 - 캐쉬를 주지 않고 시작값은 1부터 최대 100까지 변화는 3씩...

create sequence sample_seq nocache maxvalue 100 increment by 3;


시퀀스 조회
 - select * from user_sequences;


시퀀스값 추출....
 - 시퀀스명.nextval

  	insert into sample(num,name,reg) values(sample_seq.nextval,'김민준',to_date('2019-11-14'));
	insert into sample values(sample_seq.nextval,'다현','1998-05-28');
	insert into sample(reg,num) values(sysdate,sample_seq.nextval);

시퀀스삭제
 - drop sequence 시퀀스명;

 	drop sequence test_seq;


----------------------------------------------------------------------------------------------------------------

검색
	select 필드명,필드명,필드명...... from 테이블명 where 조건;
수정
	update 테이블명 set 필드명 = 수정할데이터,필드명 = 수정할데이터... where 조건;
삭제
	delete 테이블명 where 조건;

--------------------------------------------------------------------------------------------------

조건

1.숫자
 - 작다 <
 - 크다 >
 - 작거나 같다 <=
 - 크거나 같다 >=
 - 같다 =
 - 같지않다 !=
 - 논리연산자
  - and , or , not
 - 회원 번호가 10번인 회원 검색
  select * from testmember where no = 10;
 - 회원 번호가 10번이 아닌 회원 검색
  select * from testmember where no != 10;
  select * from testmember where no <> 10; -- Oracle에서만 가능...
  select * from testmember where not no = 10;
  select * from testmember where no < 10 or no > 10;

2.문자
 - 일치 검색  = 
	이름이 김민준인 회원 검색
	select * from testmember where name = '김민준';
 - 포함 검색 - like
   - where 필드명 like 값;
	'%값'  '값%'  '%값%'
  - 김씨인 회원 검색
	select * from testmember where name like '김%';

  - 진으로 끝나는 회원 검색
	select * from testmember where name like '%진';

3.날짜 = 숫자 + 문자

 - 15년도에 가입한 회원검색
 	select * from testmember where joindate >= '15/01/01' and joindate <= '15/12/31';
	select * from testmember where joindate like '15/%';

 - 17년 2월에 가입한 회원 검색...
	select * from testmember where joindate like '17/02%';
	select * from testmember where joindate >= '17/02/01' and joindate <= '17/03/01' - 1;

	select * from testmember where joindate >= '17/02/01' and joindate <= to_date('17/03/01') - 1;


------------------------------------------------------------------------------------------------------

between - 사이에 있는 것을 구하는 명령...
	where 필드명 between 값 and 값;
	
select * from testmember where joindate between '15/01/01' and '15/12/31'; 

----------------------------------------------------------------------------------------

NULL검색
	where 필드명 is null / not null

	select * from testmember where pw is null;


-----------------------------------------------------------------------------------------------

정렬
 - order by 필드명 정렬상태,필드명 정렬상태,필드명 정렬상태....;
 - 오름차순 - asc , 내림차순 - desc
 - 항상 sql문의 가장 끝에 적어야 한다....

	select * from testmember order by money desc;

	select * from testmember order by money desc,no asc;


	select * from testmember where pw is null order by money desc;


------------------------------------------------------------------------------------------------

오라클 내장함수
1.합 - sum(필드명)
2.평균 - avg(필드명)
3.최대 - max(필드명)
4.최소 - min(필드명)
5.개수 - count(필드명)

 select 함수명(필드명) from 테이블명;

 	select avg(money) from testmember;


	select avg(money) as 평균 from testmember;


// - 마일리지가 가장 많은 사람의 이름을 출력...
	select name from testmember where money = max(money);
	select name from testmember where money = (select max(money) from testmember);


====================================================================================================


수정
	update 테이블명 set 필드명 = 수정할데이터,필드명 = 수정할데이터... where 조건;

	14년도에 가입한 회원들에게 마일리지를 10000씩 추가 제공.....

	update testmember set money = money + 10000 where joindate like '14/%';

삭제
	delete 테이블명 where 조건;



=====================================================================================================

테이블 제약 조건
 - 내가 원하는 데이터의 유입을 시키기위해서 사용하는 조건들...


1. not null - null 금지조건

create table test2(
no number not null,
name varchar2(15) not null,
gender varchar2(10) not null,
money number
);

insert into test2 values(null, null, null, null);
insert into test2 values(1, '홍길동', '남자', 100);

2. unique - 중복금지

create table test3(
no number unique,
name varchar2(15) not null,
gender varchar2(10) not null,
money number
);


create table test03(
no number unique not null,
name varchar2(15) not null,
gender varchar2(10) not null,
money number
);

insert into test03 values(null, '홍길동', '남자', 100);
insert into test03 values(1, '홍길동', '남자', 100);

3. check- 원하는 값을 넣기 위한 조건.....

create table test5(
no number primary key,
name varchar2(15) not null,
gender varchar2(10) check(gender in('남자','여자')),
money number
);

insert into test5 values(1, '홍길동', '남자', 0);
insert into test5 values(2, '김태희', '여자', 0);
insert into test5 values(3, '둘리', '???', 0);
insert into test5 values(4, '또치', null, 0);


4. default - 기본값 설정...

create table test6(
no number primary key,
name varchar2(15) not null,
gender varchar2(10) check(gender in('남자','여자')),
money number default 0
);

insert into test6 values(1, '장동건', '남자', 0);
insert into test6 values(2, '김태희', '여자', 100);
insert into test6 values(3, '원빈', '남자', null);
insert into test6(no, name, gender) values(4, '둘리', '남자');

5. primary key - 기본키
 - 테이블의 대표 항목
 - 테이블 당 1개만 설정 가능하다...
 - not null + unique 

create table test4(
no number primary key,
name varchar2(15) not null,
gender varchar2(10) not null,
money number
);

insert into test4 values(null, '강호동', '남자', null);
insert into test4 values(1, '홍길동', '남자', 100);

6. foreign key - 외래키
 - 다른 테이블의 primary key 를 가져와서 참조하는 용도....



















































